diff --git a/src/HAL9000/src/cmd_thread_helper.c b/src/HAL9000/src/cmd_thread_helper.c
index 56e69af..91446b3 100644
--- a/src/HAL9000/src/cmd_thread_helper.c
+++ b/src/HAL9000/src/cmd_thread_helper.c
@@ -17,6 +17,7 @@
 #include "vmm.h"
 #include "pit.h"
 
+#include "thread.c"
 
 #pragma warning(push)
 
@@ -44,6 +45,8 @@ typedef struct _BOUND_THREAD_CTX
 static FUNC_ThreadStart     _ThreadCpuBound;
 static FUNC_ThreadStart     _ThreadIoBound;
 
+//static THREAD_SYSTEM_DATA m_threadSystemData;
+
 static
 void
 _CmdHelperPrintThreadFunctions(
@@ -128,6 +131,7 @@ void
     STATUS status;
 
     ASSERT(NumberOfParameters == 0);
+    LOG("Number of threads in the system: %d", m_threadSystemData.NumberOfThreads);
 
     LOG("%7s", "TID|");
     LOG("%20s", "Name|");
diff --git a/src/HAL9000/src/thread.c b/src/HAL9000/src/thread.c
index 3ec2095..acd0092 100644
--- a/src/HAL9000/src/thread.c
+++ b/src/HAL9000/src/thread.c
@@ -36,6 +36,8 @@ typedef struct _THREAD_SYSTEM_DATA
 
     _Guarded_by_(ReadyThreadsLock)
     LIST_ENTRY          ReadyThreadsList;
+
+    QWORD               NumberOfThreads;
 } THREAD_SYSTEM_DATA, *PTHREAD_SYSTEM_DATA;
 
 static THREAD_SYSTEM_DATA m_threadSystemData;
@@ -145,6 +147,8 @@ ThreadSystemPreinit(
 
     InitializeListHead(&m_threadSystemData.ReadyThreadsList);
     LockInit(&m_threadSystemData.ReadyThreadsLock);
+
+    m_threadSystemData.NumberOfThreads = 0;
 }
 
 STATUS
@@ -328,6 +332,7 @@ ThreadCreateEx(
     status = _ThreadInit(Name, Priority, &pThread, TRUE);
     if (!SUCCEEDED(status))
     {
+        LOG_ERROR("Failed to create thread: name=%s, TID=%x\n ", pThread->Name, pThread->Id);
         LOG_FUNC_ERROR("_ThreadInit", status);
         return status;
     }
@@ -564,6 +569,9 @@ ThreadExit(
 
     ProcessNotifyThreadTermination(pThread);
 
+    LOG("Exiting thread: name=%s, TID=%x\n", pThread->Name, pThread->Id);
+    m_threadSystemData.NumberOfThreads -= 1;
+
     LockAcquire(&m_threadSystemData.ReadyThreadsLock, &oldState);
     _ThreadSchedule();
     NOT_REACHED;
@@ -794,6 +802,9 @@ _ThreadInit(
         pThread->State = ThreadStateBlocked;
         pThread->Priority = Priority;
 
+        LOG("Created thread: name=%s, TID=%x\n", pThread->Name, pThread->Id);
+        m_threadSystemData.NumberOfThreads += 1;
+
         LockInit(&pThread->BlockLock);
 
         LockAcquire(&m_threadSystemData.AllThreadsLock, &oldIntrState);
